#version 400 core

in vec2 fragTextureCoordinates;
in vec3 fragNormal;
in vec3 toLightVector[16];
in vec3 worldPosition;
in vec3 cameraPosition;
in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour[16];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){

	vec3 unitNormal = normalize(fragNormal);
	vec3 unitVectorToCamera = normalize(cameraPosition - worldPosition);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < 16; i++){
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDotl = dot(unitNormal, unitLightVector);
		float brightness = max(nDotl, 0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse + brightness * lightColour[i];
		totalSpecular = totalSpecular + dampedFactor * reflectivity * lightColour[i];
	}
	
	totalDiffuse = max(totalDiffuse, 0.2);
	
	vec4 textureColour = texture(modelTexture, fragTextureCoordinates);
	
	if(textureColour.a <= 0){
		discard;
	}

	out_Color = vec4(totalDiffuse,1.0) * textureColour + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility); 
}