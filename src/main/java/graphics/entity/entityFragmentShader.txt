#version 430 core

in vec3 fragmentPosition;
in vec2 fragmentTextureCoordinates;
in vec3 fragmentNormal;

layout (location = 0) out vec4 fragmentColour;

struct DirectionalLight {
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight {
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct SpotLight {
	vec3 position;
	vec3 direction;
	float angle;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct Material {
	sampler2D diffuse;
	sampler2D specular;
};

const int MAX_LIGHTS = 1;

uniform Material material;
uniform DirectionalLight directionalLights[MAX_LIGHTS];
uniform PointLight pointLights[MAX_LIGHTS];
uniform SpotLight spotLights[MAX_LIGHTS];
uniform mat4 viewMatrix;

vec3 calculateDirectionalLight(DirectionalLight light, vec3 textureColour, vec3 normal);
vec3 calculatePointLight(PointLight light, vec3 normal, vec3 fragmentPosition, vec3 viewDirection);
vec3 calculateSpotLight(SpotLight light, vec3 normal, vec3 viewDirection);

void main(){

	vec3 normal = normalize(fragmentNormal);
	vec3 textureColour = vec3(texture(material.diffuse, fragmentTextureCoordinates));
	vec3 lightingColour = vec3(0.0);
	for (int i=0; i < MAX_LIGHTS; i++) {
		lightingColour += calculateDirectionalLight(directionalLights[i], textureColour, normal);
	}
	fragmentColour = vec4(calculateDirectionalLight(directionalLights[0], textureColour, normal), 1.0);
	
}

vec3 calculateDirectionalLight(DirectionalLight light, vec3 textureColour, vec3 normal) {
	vec3 toLightVector = normalize(vec3(viewMatrix * vec4(-light.direction, 0.0)));
	float diffuseFactor = min(1, 0.2 + max(dot(normal, toLightVector), -0.2) / 1.2);
	vec3 reflectedLightVector = reflect(-toLightVector, normal);
	float specularFactor = pow(max(dot(normalize(-fragmentPosition), reflectedLightVector), 0.0), 16);
	vec3 specularMaterial = vec3(texture(material.specular, fragmentTextureCoordinates));
	vec3 ambient  = light.ambient * textureColour;
    vec3 diffuse  = light.diffuse * diffuseFactor * textureColour;
    vec3 specular = light.specular * specularFactor * specularMaterial;
    return (ambient + diffuse + specular);
}