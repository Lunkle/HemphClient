#version 400 core

in vec3 fragmentPosition;
in vec2 fragmentTextureCoordinates;
in vec3 fragmentNormal;

layout (location = 0) out vec4 fragmentColour;

struct DirectionalLight {
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight {
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct SpotLight {
	vec3 position;
	vec3 direction;
	float angle;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

const int NUM_LIGHTS = 5;
uniform DirectionalLight directonalLights[NUM_LIGHTS];
uniform PointLight pointLights[NUM_LIGHTS];
#uniform SpotLight spotLights[NUM_LIGHTS];
uniform sampler2D textureSampler;

vec3 calculateDirectionalLight(DirectionalLight light, vec3 normal, vec3 viewDirection);
vec3 calculatePointLight(PointLight light, vec3 normal, vec3 fragmentPosition, vec3 viewDirection);
#vec3 calculateSpotLight(SpotLight light, vec3 normal, vec3 viewDirection);

void main(){

	vec3 normal = normalize(fragmentNormal);
	fragmentColour = texture(textureSampler, fragmentTextureCoordinates);
	
}

vec3 calculateDirectionalLight(DirectionalLight light, vec3 normal, vec3 viewDirection) {
	vec3 toLightVector = -light.direction;
	float diffuse = max(dot(normal, toLightVector), 0);
	vec3 reflectVector = reflect(-light.direction, normal);
	float specular = pow(max(dot(viewDirection, reflectVector), 0.0), 5);
}