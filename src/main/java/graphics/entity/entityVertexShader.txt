#version 400 core

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

out vec2 fragTextureCoordinates;
out vec3 fragNormal;
out vec3 toLightVector[16];
out vec3 worldPosition;
out vec3 cameraPosition;
out float visibility;

uniform mat4 modelMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 inverseViewMatrix;
uniform vec3 lightPosition[16];
uniform float useFakeLighting;
uniform int textureGridSize;
uniform vec2 textureOffset;

const float density = 0.0027;
const float gradient = 10.5;

void main(void){

	worldPosition = (modelMatrix * vec4(position, 1.0)).xyz;
	vec4 viewPosition = viewMatrix * modelMatrix * vec4(position, 1.0);
	gl_Position = projectionMatrix * viewPosition;
	fragTextureCoordinates = textureOffset + textureCoordinates/textureGridSize;
	cameraPosition = (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	
	vec3 actualNormal = normal;
	if(useFakeLighting > 0.5){
		actualNormal = vec3(0.0, 1.0, 0.0);
	}
	
	fragNormal = (modelMatrix * vec4(actualNormal,0.0)).xyz;
	for(int i = 0; i < 16; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	
	float distance = length(viewPosition.xyz);
	visibility = exp(-pow((distance * density), gradient));
}